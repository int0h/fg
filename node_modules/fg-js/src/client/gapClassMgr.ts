"use strict";

import {Component} from './componentBase';
import {IDataPath, IDataQueryObj, DataQuery} from '../valueMgr';
import * as utils from '../utils';
import {IRenderMeta} from '../valueMgr';
import * as valueMgr from '../valueMgr';
import {IAstNode} from '../outerTypes';
import DataDispatcher from '../dataDispatcher';

let gid = 0;

export interface IGapData{
	line: number;
	type: string;
	dataSource: IDataQueryObj;
	tplId?: number;
	eid?: string;
	scope?: valueMgr.IScopeData;
};

export interface IScopeTable {
	[key: string]: IDataPath;
};

export type GapClass = new (parsedMeta: IGapData, parent: Gap) => Gap;

export abstract class Gap{
	static isVirtual: boolean;
	type: string;
	line: number;
	children: Gap[] = [];
	dataSource: DataQuery;
	parent: Gap;
	root: Gap;
	context: Component;
	eid: string;
	gid: number;
	tplId: number;

	dataSourceInit(parsed: IGapData){
		if (!parsed.dataSource){
			return;
		};
		this.dataSource = new DataQuery(parsed.dataSource);
	};

	genId (contextId: number, meta: IRenderMeta): string {
		return `fg-${contextId}_gid-${this.gid}_${meta.dynamicPath.join('-')}`;
	};

	getDom (contextId: number, meta: IRenderMeta): HTMLElement[] {
		const Ctor = this.constructor as typeof Gap;
		if (Ctor.isVirtual){
			let res: HTMLElement[] = [];
			this.children.forEach(gap => res = res.concat(gap.getDom(contextId, meta)))
		};
		const id = this.genId(contextId, meta);
		return [document.getElementById(id)];
	};

	public static priority: number = 0;

	constructor (parsedMeta: IGapData, parent: Gap){	
		utils.extend(this, parsedMeta); // todo: why?
		this.tplId = parsedMeta.tplId;
		this.gid = gid;
		gid++;
		this.children = [];	
		this.context = null;			
		if (parent){
			this.parent = parent;					
			this.root = parent.root;
			parent.children.push(this);
		}else{
			this.parent = null;					
			this.root = this;
		};
		this.dataSourceInit(parsedMeta);			
	};

	static parse(node: IAstNode, dataDispatcher: DataDispatcher, parents: IGapData[], html?: string): IGapData{
		return null;
	};

	abstract render(context: Component, data: any, meta: valueMgr.IRenderMeta): string;

	update(context: Component, meta: IRenderMeta, oldData: any, newData: any){
		return;
	};

	getParents(): Gap[] {
		let arr: Gap[] = [];
		let parent = this.parent;
		while (parent){
			arr.push(parent);
			parent = parent.parent;
		};
		return arr;
	}
};

import gaps from '../gaps';