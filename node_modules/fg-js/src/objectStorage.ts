"use strict";

import {Map} from './polyfill';

export interface Storage<Type> {
	[key: string]: Type;
};

export interface StorageSet {
	[key: number]: Storage<any>;
	0: Storage<any[]>;
	1: Storage<number>;
	2: Storage<Object>;
	3: Storage<string>;
};

export interface SupportedTypes {
	[key: string]: number;
};

const supportedTypes: SupportedTypes = {
	"array": 0,
	"number": 1,
	"object": 2,
	"string": 3
};

function throwError(err: string){
	throw new Error(err);
};

export default class ObjectStorage {
	curId: number;
	storages: StorageSet;
	objCache = new Map();

	constructor (){
		this.curId = 5;
		this.storages = [
			Object.create(null),
			Object.create(null),
			Object.create(null),
			Object.create(null)
		];
	};

	getIdFromStr(kind: number, objCode: string): number {
		let id = this.storages[kind][objCode];
		if (id === undefined){
			id = this.curId;
			this.curId++;
			this.storages[kind][objCode] = id;
		};
		return id;
	};

	getHashStr(val: any): number {		
		if (val === undefined){
			return 0;
		};
		if (val === null){
			return 1;
		};
		if (val !== val){ // NaN
			return 2;
		};
		if (val === true){
			return 3;		
		};
		if (val === false){
			return 4;		
		};
		const type = typeof val;
		if (!(type in supportedTypes)){
			throwError("Type " + type + " is not supported");
		};
		if (type !== "object"){	
			return this.getIdFromStr(supportedTypes[type], val.toString());
		};
		if (Array.isArray(val)){
			let parts: number[] = [];
			for (let i = 0; i < val.length; i++){
				const item = val[i];
				const res = this.hash(item);			
				parts.push(res);
			};		
			return this.getIdFromStr(supportedTypes["array"], parts.join(','));
		};
		const keys = Object.keys(val).sort();
		let parts: string[] = [];
		for (let i = 0; i < keys.length; i++){
			var key = keys[i];
			var value = val[key];
			var keyHash = this.getIdFromStr(supportedTypes["string"], key);		
			var valHash = this.hash(value);	
			parts.push(keyHash + '=' + valHash);
		};
		return this.getIdFromStr(supportedTypes["object"], parts.join(','));
	};

	hash(val: any): number {
		if (typeof val !== "object"){
			return this.getHashStr(val);
		};
		var found = this.objCache.get(val);
		if (found !== undefined){
			return found;
		};	
		var code = this.getHashStr(val);
		this.objCache.set(val, code);
		return code;
	};
};