"use strict";

import $path from './pathUtils';
import * as vanilaPath from 'path';
const path: typeof vanilaPath = require('upath');
import {Template, TplData} from '../common/tplMgr';
import DataDispatcher from '../dataDispatcher';
const microJade = require('micro-jade');

Template.tplEngine = microJade;

export interface IFgMeta{
	name: string;
    nameSpace: string;
	objPath: string[];
	path: string;
	tpl: string;
	classFn: string;
	subs: IFgMeta[];
};

export interface IComponentSet {
    name: string;
    items: IFgMeta[];
};

export function transformTpl(code: string, dd: DataDispatcher): string{
	const parsed = Template.parse(code, dd);
	const dataTransformer = dd.genTransformer();	
	// const json = toJs(parsed, {
	// 	n: '\n',
	// 	tab: '\t'
	// });
	const json = JSON.stringify(parsed, null, 4);
	let res = "const tpl: any = " + json + ";\n";
	res += "export default tpl;";
	return res;
};

export function genIncludeFile(meta: IComponentSet, fgRoot: string, dest: string): string {
	let codeParts: string[] = [];
	let curId = 0;
    let classTree: any = {};

	function writeFg(meta: IFgMeta, classTreeBranch: any){
        const className = `class_${curId}`;
        const relPath = './' + meta.path;		
        codeParts.push(`//component ${relPath}:`);        
		if (meta.tpl){
			const importPath = `./${relPath}/tpl`;
			codeParts.push(`import tpl_${curId} from '${importPath}';`);
			const importDtPath = `./${relPath}/dataTransform`;
			codeParts.push(`import dt_${curId} from '${importDtPath}';`);			
		}else{
			codeParts.push(`const tpl_${curId}: any = null;`);
			codeParts.push(`const dt_${curId}: any = null;`);			
		};
		if (meta.classFn){
			const classPath = $path(relPath, './class');
			codeParts.push(`import ${className} from './${classPath}'`);
		}else{
			codeParts.push(`const ${className} = getDefaultClass();`);
		};
		codeParts.push(`${className}.init({
			tpl: tpl_${curId},
			dataTransform: dt_${curId},
			name: null
		});`);		
        //const objPath = meta.objPath.join('.');        
        classTreeBranch[meta.name] = {};
        let childBranch = classTreeBranch[meta.name]; 
        classTreeBranch[meta.name].$ = `#${className}`;
        codeParts.push('\n\n');
		curId++;
		meta.subs.forEach(sub => writeFg(sub, childBranch));
	};

	//codeParts.push(`import {getDefaultClass} from '../build/';`);
	codeParts.push(`import {getDefaultClass, load} from 'fg-js/build/client/main';`);
    codeParts.push('\n\n');
	//codeParts.push(`const getDefaultClass = require('fg-js');`);
    meta.items.forEach(item => writeFg(item, classTree));
    const classTreeCode = JSON.stringify(classTree, null, 4)
        .replace(/"#(\w+_\d+)"/g, (subStr, name) => name);
	codeParts.push(`\n\nexport const classTree = ${classTreeCode};`);
	codeParts.push(`\n\nload(classTree);`);
	return codeParts.join('\n');
};