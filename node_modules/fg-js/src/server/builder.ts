"use strict";

import * as fs from 'fs-extra';
import * as path from 'path';
import * as browserify from 'browserify';
const tsify = require('tsify');
//const watchify = require('watchify');
import * as serverUtils from './serverUtils';
import {Template, TplData} from '../common/tplMgr';
import DataDispatcher from '../dataDispatcher';
import $path from './pathUtils';
import {transformTpl, genIncludeFile, IFgMeta, IComponentSet} from './compiler';

const fgLibPath = path.resolve(path.dirname(require.resolve('fg-js')) + '/', '..');

export interface IBuildOptions {
	srcPath: string;
	destPath: string;
	tempPath: string;
};

export class Builder {
	srcPath: string;
	destPath: string;
	tempPath: string;

	constructor (options: IBuildOptions){
		this.destPath = options.destPath;
		this.srcPath = options.srcPath;
		this.tempPath = options.tempPath;
	};

	buildDt(relPath: string, dd: DataDispatcher){
		const dtCode = 'export default ' + dd.genTransformer();
        fs.writeFileSync($path(this.tempPath, relPath, './dataTransform.ts'), dtCode);
	};

	buildTpl(relPath: string): string {
		const tplPath = $path(this.srcPath, relPath, './tpl.jade');
        if (!serverUtils.fileExist(tplPath)){
			return null;
		};
		const tplCode = fs.readFileSync(tplPath).toString();
		const dd = new DataDispatcher();			
		const tplDataCode = transformTpl(tplCode, dd);
		this.buildDt(relPath, dd);		 
		const tplDestPath = $path(this.tempPath, relPath, './tpl.ts');
		fs.writeFileSync(tplDestPath, tplDataCode);
		return tplCode;
	};

	buildClassFn(relPath: string): string {
		const classPath = $path(this.srcPath, relPath, './class.ts');
		if (!serverUtils.fileExist(classPath)){
			return null;
		};
		const classCode = fs.readFileSync(classPath).toString();
		fs.writeFileSync($path(this.tempPath, relPath, './class.ts'), classCode);	
		return classCode;		 
	};

	buildSubs(relPath: string): IFgMeta[] {
		const componentSrcPath = $path(this.srcPath, relPath);
		const subDirs = serverUtils.getSubFolders(componentSrcPath);
        return subDirs.map(dir => {
			const subRelPath = $path(relPath, dir);
			return this.buildComponent(subRelPath);
        });
	};

	buildComponent(relPath: string): IFgMeta {
		const name = path.parse(relPath).name;
		const subs = this.buildSubs(relPath);
		const meta: IFgMeta = {
			name,
			classFn: this.buildClassFn(relPath),
			tpl: this.buildTpl(relPath),
			nameSpace: null,
			objPath: null,
			path: relPath,
			subs
		};
		return meta;
	};

};

const buildRuntimeCfg = {
    "compilerOptions": {
        "target": "es5",
        "moduleResolution": "node",
        "typeRoots": [
            $path(fgLibPath, "./node_modules/@types")
        ],
        "outDir": "./build",
        "inlineSourceMap": true
    },
    "files": [
        "./ts/include.ts"
    ]    
};

export function buildRuntime(destPath: string, cb: Function){
	const brofy = browserify({
		debug: true
	});
	brofy
		.add($path(fgLibPath, '/src/client/main.ts'))
		.plugin(tsify, {
			project: buildRuntimeCfg
		})
		.require(fgLibPath + '/src/client/main.ts', { expose: 'fg-js/build/client/main' })
		.bundle(function(err: any, code: Buffer){
			if (err){
				console.error(err);
				return;
			};
			fs.writeFileSync(destPath, code);
			cb(null);
		});
};

const buildCfg = {
    "compilerOptions": {
        "target": "es5",
        "moduleResolution": "node",
        "typeRoots": [
            "../node_modules/@types"
        ],
        "outDir": "./build",
        "inlineSourceMap": true
    },
    "files": [
        "./ts/include.ts"
    ]
};

export function build(srcPath: string, destPath: string, cb: Function){
	const tempPath = $path(process.cwd(), './temp/ts');
	const builder = new Builder({
		destPath,
		srcPath,
		tempPath 
	}); 	
	const meta = builder.buildSubs('.');
	const compSet: IComponentSet = {
		name: null,
		items: meta
	};
	const includeCode = genIncludeFile(compSet, srcPath, tempPath);
	const includeFilePath = $path(tempPath, './include.ts');
	fs.writeFileSync(includeFilePath, includeCode);
	const brofy = browserify({
		debug: true
	});
	brofy
		.add(includeFilePath)
		.external([
			"fg-js/build/client/main"
		])
		.plugin(tsify, {
			project: buildCfg
		})
		.bundle(function(err: any, code: Buffer){
			if (err){
				console.error(err);
				return;
			};
			fs.writeFileSync(destPath, code);
			cb(null);
		});
};

export function buildTest(cb: Function){
	const testDir = $path(process.cwd(), './tests');
	buildRuntime(process.cwd() + '/temp/runtime.js', function(err: Error){
		if (err){
			cb(err);
			return;
		};		
		build(
			$path(testDir, './fg-src/'), 
			$path(process.cwd(), './temp/fg.js'), 
			function(err: Error){
				cb(err);
			}
		);
	});
};