"use strict";

import {Map} from './polyfill';

function ObjectStorage(){

};

var curId = 0;
var objectStore = [];
for (var i = 0; i < 7; i++){
	objectStore[i] = {};	
};
var objCache = new Map();

function getIdFromStr(kind, objCode){
	var id = objectStore[kind][objCode];
	if (id === undefined){
		id = curId;
		curId++;
		objectStore[kind][objCode] = id;
	};
	return id;
};

var supportedTypes = {
	"number": 0,
	"array": 1,
	"boolean": 2,
	"null": 3,
	"object": 4,
	"string": 5,
	"undefined": 6
};

function throwError(err){
	throw new Error(err);
};

function getHashStr(val){
	if (val === undefined){
		return getIdFromStr(supportedTypes["undefined"], val);
	};
	if (val === null){
		return getIdFromStr(supportedTypes["null"], val);
	};
	var type = typeof val;
	if (!(type in supportedTypes)){
		throwError("Type " + type + " is not supported");
	};
	if (type !== "object"){	
		return getIdFromStr(supportedTypes[type], val.toString());
	};
	if (Array.isArray(val)){
		var content = [];
		var parts = [];
		for (var i = 0; i < val.length; i++){
			var item = val[i];
			var res = hash(item);			
			parts.push(res);
		};		
		return getIdFromStr(supportedTypes.array, parts.join(','));
	};
	var keys = Object.keys(val).sort();
	var parts = [];
	//keys.forEach(function(key){
	for (var i = 0; i < keys.length; i++){
		var key = keys[i];
		var value = val[key];
		var keyHash = getIdFromStr(supportedTypes.string, key);		
		var valHash = hash(value);	
		parts.push(keyHash + '=' + valHash);
	};
	//});
	return getIdFromStr(supportedTypes.object, parts.join(','));
};

function hash(val){
	if (typeof val !== "object"){
		return getHashStr(val);
	};
	var found = objCache.get(val);
	if (found !== undefined){
		return found;
	};	
	var code = getHashStr(val);
	objCache.set(val, code);
	return code;
};

ObjectStorage.prototype.add = function(obj){
    
};