import {IDataQueryObj, IDataPath} from './valueMgr';
import {prefixLines} from './serverUtils';

export interface IScope {
    path: IDataPath;
    name: string;    
};

export class TransformUtils {
    static prepareScope (value: any): any[] {
        if (!value){
            return [];
        };
        if (!Array.isArray(value)){
            return [value];
        };
        return value;
    };
};

function pathToStr(path: IDataPath): string {
    if (path.length === 0){
        return '__rawData';
    };
    if (path[0][0] === "$"){
        return path.join('.');
    };
    return ['__rawData'].concat(path).join('.');
};

export interface IPathCache {
    [key: string]: number;
};

export default class DataDispatcher {
    isScope: boolean;
    scopeName: string;
    parent: DataDispatcher;
    content: DataDispatcher[];
    self: IDataPath[];
    cache: any;

    constructor (parent?: DataDispatcher, isScope?: boolean, scopeName?: string){
        this.parent = parent; 
        this.content = [];
        this.self = [];
        this.cache = {};
        if (isScope){
            this.scopeName = scopeName || '$scope';
            this.isScope = isScope;            
        };
    };

    reg (self: IDataQueryObj[], isScope?: boolean, scopeName?: string): DataDispatcher {
        const child = new DataDispatcher(this, isScope, scopeName);
        self.forEach(ds => child.add(ds));
        this.content.push(child);
        return child;
    };

    add (ds: IDataQueryObj){
        const pathStr: string = pathToStr(ds.path);
        const cached = this.cache[pathStr];
        let id: number;            
        if (cached === undefined){
            id = this.self.length;   
            this.self.push(ds.path);
            this.cache[pathStr] = id;
        } else {
            id = cached;
        };
        ds.dataId = id;           
    };

    genTransformerBody(): string {
        const selfCode = '[' + this.self.map(path => pathToStr(path)).join(',\n\t') + ']';
        let contentCode: string;
        if (this.content.length === 0){
            contentCode = 'null';
        }else{
            contentCode = '[' + this.content.map(dd => {
                const ddCode = dd.genTransformerBody();
                const shiftedDdCode = prefixLines(ddCode, '\t\t');
                return shiftedDdCode;
            }).join(',\n').replace(/^\t+/, '') + ']';
        };
        if (this.isScope){
            const scopePath = pathToStr(this.self[0]);
            const genItemsCode = `__utils.prepareScope(${scopePath}).map($${this.scopeName} => ${contentCode.replace(/^\t+/, '')})`;
            const codeParts: string[] = [
                '{',
                    '\tisScope: true,',
                    '\tds: ' + scopePath + ',',
                    '\titems: ' + genItemsCode,
                '}'
            ];   
            return codeParts.join('\n');
        };
        const codeParts: string[] = [
            '{',
                '\tself: ' + selfCode + ',',
                '\tcontent: ' + contentCode.replace(/^\t+/, ''),
            '}'
        ];        
        return codeParts.join('\n');
    };

    genTransformer(): string {
        return `function transform(__rawData, __utils){return ${this.genTransformerBody()}}`;
    };

};