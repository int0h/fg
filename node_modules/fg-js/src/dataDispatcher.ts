import {IDataQueryObj, IDataPath} from './valueMgr';
import {prefixLines} from './serverUtils';

export interface IScope {
    dd: DataDispatcher;
    path: IDataPath;
    name: string;    
};

function pathToStr(path: IDataPath): string {
    if (path.length === 0){
        return '__rawData';
    };
    if (path[0][0] === "$"){
        return path.join('.');
    };
    return ['__rawData'].concat(path).join('.');
};

export interface IPathCache {
    [key: string]: number;
};

export default class DataDispatcher {
    scopes: string[];
    parts: (IDataPath | IScope)[];
    parent: DataDispatcher;
    cache: IPathCache;

    constructor (parent?: DataDispatcher){
        this.parts = [];
        this.scopes = [];
        this.parent = parent; 
        this.cache = {};
    };

    add(ds: IDataQueryObj){
        const pathStr = pathToStr(ds.path);
        const cached = this.cache[pathStr];
        let id: number;
        if (cached === undefined){            
            id = this.parts.length;
            this.parts.push(ds.path);
        } else {
            id = cached;
        };
        ds.path = null;
        ds.dataId = id; 
        this.cache[pathStr] = id;
    };

    scope(ds: IDataQueryObj, name: string): DataDispatcher { 
        const id = this.parts.length;
        const newDD = new DataDispatcher(this);
        this.parts.push({
            name,
            dd: newDD,
            path: ds.path
        });
        ds.path = null;
        ds.dataId = id;
        return newDD;
    };

    genTransformerBody(): string {
        let codeParts: string[];
        codeParts = this.parts.map(part => {
            if (Array.isArray(part)){
                return pathToStr(part as IDataPath);                
            };
            const scope = part as IScope;
            const ddCode = scope.dd.genTransformerBody();
            let shiftedDdCode = prefixLines(ddCode, '\t', (_: any, id: number) => id > 0);
            if (scope.dd.parts.length === 0){
               shiftedDdCode = 'null';
            };
            const mapCode = `(${pathToStr(scope.path)} || []).map($${scope.name} => ${shiftedDdCode})`;        
            return mapCode;
        })
        return '[\n' + codeParts.map((line: string) => '\t' + line).join(',\n') + '\n]';
    };

    genTransformer(): string {
        return `function transform(__rawData){return ${this.genTransformerBody()}}`;
    };

};