"use strict";

import * as utils from '../utils';  
import {DataQuery, IRenderMeta} from '../valueMgr';  
import {IStrTplData, StrTpl} from '../strTpl';  
import {Gap, IGapData} from '../client/gapClassMgr';  
import {Component} from '../client/componentBase';
import {IAstNode} from '../outerTypes';
import GData from './data';

export interface IDynamicTextParsedData extends IGapData {
	tpl: IStrTplData;
};

export default class GDynamicText extends Gap{

	tpl: StrTpl;
	type: string = "dynamicText";

	constructor (parsedMeta: IDynamicTextParsedData, parent: Gap){
		super(parsedMeta, parent);
		this.tpl = new StrTpl(parsedMeta.tpl);
	};

	static parse(node: IAstNode, parents: IGapData[]): IGapData{
		if (node.type !== "text"){
			return null;
		};
		const tpl = StrTpl.parse(node.text, (ref, extra) => {
			return DataQuery.parse(ref, extra).resolve(parents).toJSON();
		});
		if (tpl.isString){
			return null;
		};
		const meta: IDynamicTextParsedData = {
			type: "dynamicText",
			tpl: tpl
		};
		return meta;
	};

	render(context: Component, data: any, meta: IRenderMeta){
		return this.tpl.render((dataSource: DataQuery) => {			
			const dataMeta = {
				"type": "data",
				"value": dataSource			
			};
			const itemMeta = new GData(dataMeta, this.parent);
			return itemMeta.render(context, data, meta);
		});
	};

};