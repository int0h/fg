"use strict";

import * as utils from '../utils';  
import {DataQuery, IRenderMeta, IDataQueryObj} from '../valueMgr';  
import {Gap, IGapData} from '../client/gapClassMgr';  
import {Component} from '../client/componentBase';  
import {IAstNode} from '../outerTypes';
import DataDispatcher from '../dataDispatcher';

export interface IDataParsedData extends IGapData {
};

export default class GData extends Gap {

	type: string = "data";
	public static isVirtual = false; 

	static parse(node: IAstNode, dataDispatcher: DataDispatcher, parents: IGapData[]): IGapData {
		if (node.tagName != "data"){
			return null;
		};		
		let dataSource = utils.parsePath(node);
		dataDispatcher.add(dataSource);		
		const meta: IDataParsedData = {
			type: "data",
			dataSource: dataSource.toJSON(),
			eid: node.attrs.id || null
		};
		return meta;
	};

	render(context: Component, data: any, meta: IRenderMeta): string {
		const value = this.dataSource.render(data, meta);
		return utils.renderTag({
			name: "span",
			attrs: {},
			innerHTML: value
		});
	};

	update(context: Component, meta: Gap, scopePath: any, value: any){
		// const node = meta.getDom()[0];
		// if (!node){
			
		// };
		// node.innerHTML = value;
		//highlight(node, [0xffffff, 0xffee88], 500);
	};

};