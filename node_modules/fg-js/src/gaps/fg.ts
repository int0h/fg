"use strict";

import * as utils from '../utils';  
import * as valueMgr from '../valueMgr';  
import {Gap, IGapData} from '../client/gapClassMgr';  
import {Component} from '../client/componentBase';
import {IAstNode} from '../outerTypes';
import {Template, TplData} from '../tplMgr';
import {IDataPath, IDataQueryObj, DataQuery, IRenderMeta} from '../valueMgr';
import DataDispatcher from '../dataDispatcher';

export interface IFgParsedData extends IGapData {
	fgName: string;
	content: TplData;
};

export default class GFg extends Gap{
	parentFg: Component;
	fgName: string;
	type: string = "fg";
	dataSource: DataQuery;
	fg: Component;

	static parse(node: IAstNode, dataDispatcher: DataDispatcher, parents: IGapData[]): IGapData{
		if (node.type != 'tag' || !~node.tagName.indexOf("fg-")){
			return null;
		};
		let dataSource = utils.parsePath(node);
		dataDispatcher.add(dataSource);
		var meta: IFgParsedData = {
			type: "fg",
			fgName: node.tagName.slice(3),
			dataSource: dataSource.toJSON(),
			eid: node.attrs.id || null,
			content: Template.read(node, dataDispatcher, null, parents)
		};
		return meta;
	};

	render(context: Component, data: any, meta: IRenderMeta){
		var self = this;
		this.parentFg = context;
		//this.renderedContent = context.renderTpl(this.content, meta, data);
		const win: any = window;
		var fgClass = win['$fg'].classes[this.fgName];
		var fgData: any = this.dataSource.getValue(data, meta);	
		var fg = fgClass.render(fgData, this, context);
		fg.on('update', function(path: any, val: any){
			//context.update(scopePath.concat(path), val);
			//console.log(path, val);
		});
		this.fg = fg;
		fg.meta = this;
		context.childFgs.push(fg);
		return fg;
	};

	update(context: Component, meta: Gap, scopePath: any, value: any){
		// var node = meta.getDom()[0];
		// if (!node){
			
		// };
		// node.innerHTML = value;
		//highlight(node, [0xffffff, 0xffee88], 500);
	};

};