"use strict";

import * as utils from '../utils';  
import * as valueMgr from '../valueMgr';  
import {Gap, IGapData} from '../client/gapClassMgr';  
import {Component} from '../client/componentBase';  
import {IAstNode} from '../outerTypes'; 
import {Template, TplData} from '../tplMgr';
import {IDataPath, DataQuery, IScope, IDataQueryObj, IRenderMeta} from '../valueMgr';
import GScope from './scope';

export interface IScopeItemParsedData extends IGapData {
	dataSource: IDataQueryObj;
	content: TplData;
};

export default class GScopeItem extends Gap{
	type: string = "scopeItem";
	dataSource: DataQuery;
	content: Template;

	constructor (parsedMeta: IScopeItemParsedData, parent: GScope){
		super(parsedMeta, parent);
		this.dataSource = new DataQuery(parsedMeta.dataSource);
		this.paths = [this.dataSource.path];
		this.content = parent.content;
	};

	render(context: Component, data: any, meta: IRenderMeta): string{
		const scopeData = this.dataSource.getValue(data, meta);	
		if (!scopeData){
			return '';
		};
		return this.content.render(context, data, meta);
	};

};