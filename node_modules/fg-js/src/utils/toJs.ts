"use strinct";

import * as utils from '../utils';

export interface IToJsOpts{
	tab?: string;
	n?: string;
};

export const wrapSymbol = "__#construct";

export function wrap<Type>(obj: Type, constructStr: string): Type {
    const res = utils.simpleClone(obj);
    res[wrapSymbol] = constructStr;
    return res; 
};

function repeatStr(str: string, count: number){
    let i = count;
    let parts: string[] = [];
    while (i--){
        parts.push(str);
    };
    return parts.join('');
};

export function toJs(obj: any, opts: IToJsOpts = {}): string{
	opts.tab = opts.tab || '\t';
	opts.n = opts.n || '\n';

	function iterate(obj: any, tabOffest: number): string {
        const tabPrefix = repeatStr(opts.tab, tabOffest);
        if (obj === null){
            return "null";
        };
        if (["string", "number", "boolean"].indexOf(typeof obj) >= 0){
            return JSON.stringify(obj);
        };
        if (typeof obj === "function"){
            let code = obj.toString();
            const lines: string[] = code.split(opts.n);
            code = lines.slice(0, 1).concat(
                    lines.slice(1).map(line => tabPrefix + line)
                )
                .join(opts.n);
            return code;
        };
        if (typeof obj === "object"){
            let codeParts: string[];
            const notNull = (str: any) => str !== null;

            const wrap = (obj: any, code: string) => {
                const wrapper = obj[wrapSymbol];
                if (!wrapper){
                    return code;
                };
                return wrapper.replace('%', code);
            };   

            if (Array.isArray(obj)){
                codeParts = obj.filter(notNull).map(function(val: any){
                    return tabPrefix + opts.tab + iterate(val, tabOffest + 1);
                });
                return wrap(obj, '[' + opts.n + codeParts.join(',' + opts.n) + opts.n + tabPrefix + ']');
            };
            codeParts = [];
            for (let key in obj){
                if (obj[key] === undefined || !obj.hasOwnProperty(key) || key === wrapSymbol){
                    continue;
                };
                codeParts.push(tabPrefix + opts.tab + '"' + key + '": ' + iterate(obj[key], tabOffest + 1));
            };		
            return wrap(obj, '{' + opts.n + codeParts.join(',' + opts.n) + opts.n + tabPrefix + '}');
        };
        return null;
	};

    return iterate(obj, 0);
	
};