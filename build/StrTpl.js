"use strict";
;
;
var StrTpl = (function () {
    function StrTpl(tpl, valueParseFn) {
        if (typeof tpl === "object") {
            this.src = tpl.src;
            this.gaps = tpl.gaps;
            this.parts = tpl.parts;
            return;
        }
        ;
        this.src = tpl;
        this.parts = [];
        this.gaps = [];
        return this.parse(tpl, valueParseFn);
    }
    ;
    StrTpl.prototype.parse = function (tpl, valueParseFn) {
        var gapStrArr = tpl.match(gapRe);
        if (!gapStrArr) {
            this.isString = true;
            this.parts = [tpl];
            return;
        }
        ;
        this.gaps = gapStrArr.map(function (part) {
            var partValue = part.slice(2, -1);
            var partRes = valueParseFn(partValue);
            partRes.escaped = part[0] !== "!";
            return partRes;
        });
        this.parts = tpl.split(gapRe);
        return this;
    };
    ;
    StrTpl.prototype.render = function (valueRenderFn) {
        var gaps = this.gaps.map(valueRenderFn);
        var parts = mixArrays(this.parts, gaps);
        return parts.join('');
    };
    ;
    return StrTpl;
}());
exports.StrTpl = StrTpl;
;
function read(tpl, valueParseFn) {
    var res = new StrTpl(tpl, valueParseFn);
    if (res.isString) {
        res = tpl;
    }
    ;
    return res;
}
exports.read = read;
;
var gapRe = /[\$\#\!]{1}\{[^\}]*\}/gm;
function mixArrays() {
    var rest = []; /*arrays*/
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i - 0] = arguments[_i];
    }
    var maxLength = 0;
    var totalLength = 0;
    for (var i = 0; i < arguments.length; i++) {
        maxLength = Math.max(arguments[i].length, maxLength);
        totalLength += arguments[i].length;
    }
    ;
    var resArr = [];
    var arrayCount = arguments.length;
    for (var id = 0; id < maxLength; id++) {
        for (var j = 0; j < arrayCount; j++) {
            if (arguments[j].length > id) {
                resArr.push(arguments[j][id]);
            }
            ;
        }
        ;
    }
    ;
    return resArr;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyVHBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1N0clRwbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFJWixDQUFDO0FBSUQsQ0FBQztBQUVGO0lBTUMsZ0JBQWEsR0FBb0IsRUFBRSxZQUEyQjtRQUM3RCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQSxDQUFDO1lBQzVCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQztRQUNSLENBQUM7UUFBQSxDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFhLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7SUFFRCxzQkFBSyxHQUFMLFVBQU0sR0FBVyxFQUFFLFlBQTBCO1FBQzVDLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFDO1lBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sQ0FBQztRQUNSLENBQUM7UUFBQSxDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVMsSUFBSTtZQUN0QyxJQUFN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