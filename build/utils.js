"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var valueMgr = require('./valueMgr');
__export(require('./utils/tplUtils'));
function objFor(obj, fn) {
    for (var i in obj) {
        fn(obj[i], i, obj);
    }
    ;
}
exports.objFor = objFor;
;
function objMap(obj, fn) {
    var newObj = {};
    objFor(obj, function (item, id) {
        var newItem = fn(item, id, obj);
        newObj[id] = newItem;
    });
    return newObj;
}
exports.objMap = objMap;
;
function objPath(path, obj, newVal) {
    if (path.length < 1) {
        if (arguments.length > 2) {
            throw 'root rewritting is not supported';
        }
        ;
        return obj;
    }
    ;
    var propName = path[0];
    if (path.length === 1) {
        if (arguments.length > 2) {
            obj[propName] = newVal;
        }
        ;
        return obj[propName];
    }
    ;
    var subObj = obj[propName];
    if (subObj === undefined) {
        //throw new Error("Cannot read " + propName + " of undefined");
        return undefined; // throw?
    }
    ;
    if (arguments.length > 2) {
        return objPath(path.slice(1), subObj, newVal);
    }
    ;
    return objPath(path.slice(1), subObj);
}
exports.objPath = objPath;
;
function attrsToObj(attrs) {
    var res = {};
    attrs.forEach(function (i) {
        res[i.name] = i.value;
    });
    return res;
}
exports.attrsToObj = attrsToObj;
;
function simpleClone(obj) {
    var res = {};
    for (var i in obj) {
        res[i] = obj[i];
    }
    ;
    return res;
}
exports.simpleClone = simpleClone;
;
function mixArrays() {
    var id = 0;
    var maxLength = 0;
    var totalLength = 0;
    for (var i = 0; i < arguments.length; i++) {
        maxLength = Math.max(arguments[i].length, maxLength);
        totalLength += arguments[i].length;
    }
    ;
    var resArr = [];
    var arrayCount = arguments.length;
    for (var id = 0; id < maxLength; id++) {
        for (var i = 0; i < arrayCount; i++) {
            if (arguments[i].length > id) {
                resArr.push(arguments[i][id]);
            }
            ;
        }
        ;
    }
    ;
    return resArr;
}
exports.mixArrays = mixArrays;
;
function resolvePath(rootPath, relPath) {
    var resPath = rootPath.slice();
    relPath = relPath || [];
    relPath.forEach(function (key) {
        if (key === "_root") {
            resPath = [];
            return;
        }
        ;
        resPath.push(key);
    });
    return resPath;
}
exports.resolvePath = resolvePath;
;
function getScopePath(meta) {
    var parentPath = [];
    if (meta.parent) {
        parentPath = meta.parent.scopePath;
        if (!parentPath) {
            throw new Error("Parent elm must have scopePath");
        }
        ;
    }
    ;
    return resolvePath(parentPath, meta.path);
}
exports.getScopePath = getScopePath;
;
function keyValueToObj(arr, keyName, valueName) {
    keyName = keyName || 'key';
    valueName = valueName || 'value';
    var res = {};
    arr.forEach(function (i) {
        res[i[keyName]] = i[valueName];
    });
    return res;
}
exports.keyValueToObj = keyValueToObj;
;
function objToKeyValue(obj, keyName, valueName) {
    keyName = keyName || 'key';
    valueName = valueName || 'value';
    var res = [];
    for (var i in obj) {
        var item = {};
        item[keyName] = i;
        item[valueName] = obj[i];
        res.push(item);
    }
    ;
    return res;
}
exports.objToKeyValue = objToKeyValue;
;
function clone(obj) {
    return Object.create(obj);
}
exports.clone = clone;
;
function concatObj(obj1, obj2) {
    var res = simpleClone(obj1);
    for (var i in obj2) {
        res[i] = obj2[i];
    }
    ;
    return res;
}
exports.concatObj = concatObj;
;
function extend(dest, src) {
    for (var i in src) {
        dest[i] = src[i];
    }
    ;
    return dest;
}
exports.extend = extend;
;
function findScopeHolder(meta) {
    var node = meta.parent;
    while (node) {
        if (!node.isScopeHolder) {
            return node;
        }
        ;
        node = node.parent;
    }
    ;
    throw new Error('cannot find scope holder');
}
exports.findScopeHolder = findScopeHolder;
;
function parsePath(parsedNode) {
    if (parsedNode.attrs.class) {
        var parts = parsedNode.attrs.class.value.split(' ');
        var parsed = valueMgr.read(parts);
        return parsed;
    }
    ;
    return valueMgr.read([]);
}
exports.parsePath = parsePath;
;
function deepClone(obj) {
    if (typeof obj === "object") {
        var map = Array.isArray(obj)
            ? obj.map.bind(obj)
            : objMap.bind(null, obj);
        return map(deepClone);
    }
    ;
    return obj;
}
exports.deepClone = deepClone;
;
function escapeHtml(code) {
    return code
        .replace(/"/g, '&quot;')
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
exports.escapeHtml = escapeHtml;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O0FBRWIsSUFBWSxRQUFRLFdBQU0sWUFBWSxDQUFDLENBQUE7QUFDdkMsaUJBQWMsa0JBQWtCLENBQUMsRUFBQTtBQUVqQyxnQkFBdUIsR0FBVyxFQUFFLEVBQVk7SUFDL0MsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNsQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBQUEsQ0FBQztBQUNILENBQUM7QUFKZSxjQUFNLFNBSXJCLENBQUE7QUFBQSxDQUFDO0FBRUYsZ0JBQXVCLEdBQVcsRUFBRSxFQUFZO0lBQy9DLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixNQUFNLENBQUMsR0FBRyxFQUFFLFVBQVMsSUFBSSxFQUFFLEVBQUU7UUFDNUIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDZixDQUFDO0FBUGUsY0FBTSxTQU9yQixDQUFBO0FBQUEsQ0FBQztBQUVGLGlCQUF3QixJQUFtQixFQUFFLEdBQVcsRUFBRSxNQUFZO0lBQ3JFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQztRQUNwQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDekIsTUFBTSxrQ0FBa0MsQ0FBQztRQUMxQyxDQUFDO1FBQUEsQ0FBQztRQUNGLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDWixDQUFDO0lBQUEsQ0FBQztJQUNGLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUM7UUFDdEIsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDeEIsQ0FBQztRQUFBLENBQUM7UUFDRixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQSxDQUFDO1FBQ3pCLCtEQUErRDtRQUMvRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUztJQUM1QixDQUFDO0lBQUEsQ0FBQztJQUNGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQztRQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUF2QmUsZUFBTyxVQXVCdEIsQ0FBQTtBQUFBLENBQUM7QUFFRixvQkFBMkIsS0FBSztJQUMvQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ1osQ0FBQztBQU5lLGtCQUFVLGFBTXpCLENBQUE7QUFBQSxDQUFDO0FBRUYscUJBQTRCLEdBQUc7SUFDOUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUEsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFOZSxtQkFBVyxjQU0xQixDQUFBO0FBQUEsQ0FBQztBQUVGO0lBQ0MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1gsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQztRQUMxQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELFdBQVcsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFBQSxDQUFDO0lBQ0YsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbEMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDO1lBQ3BDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUEsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQUEsQ0FBQztRQUNILENBQUM7UUFBQSxDQUFDO0lBQ0gsQ0FBQztJQUFBLENBQUM7SUFDRixNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQWxCZSxpQkFBUyxZQWtCeEIsQ0FBQTtBQUFBLENBQUM7QUFFRixxQkFBNEIsUUFBUSxFQUFFLE9BQU87SUFDNUMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQy9CLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBUyxHQUFHO1FBQzNCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBQ3BCLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDYixNQUFNLENBQUM7UUFDUixDQUFDO1FBQUEsQ0FBQztRQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2hCLENBQUM7QUFYZSxtQkFBVyxjQVcxQixDQUFBO0FBQUEsQ0FBQztBQUVGLHNCQUE2QixJQUFJO0lBQ2hDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUNwQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztRQUNoQixVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFDO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQUEsQ0FBQztJQUNILENBQUM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFUZSxvQkFBWSxlQVMzQixDQUFBO0FBQUEsQ0FBQztBQUVGLHVCQUE4QixHQUFHLEVBQUUsT0FBTyxFQUFFLFNBQVM7SUFDcEQsT0FBTyxHQUFHLE9BQU8sSUFBSSxLQUFLLENBQUM7SUFDM0IsU0FBUyxHQUFHLFNBQVMsSUFBSSxPQUFPLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDWixDQUFDO0FBUmUscUJBQWEsZ0JBUTVCLENBQUE7QUFBQSxDQUFDO0FBRUYsdUJBQThCLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUztJQUNwRCxPQUFPLEdBQUcsT0FBTyxJQUFJLEtBQUssQ0FBQztJQUMzQixTQUFTLEdBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQztJQUNqQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDYixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQSxDQUFDO1FBQ2xCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFYZSxxQkFBYSxnQkFXNUIsQ0FBQTtBQUFBLENBQUM7QUFFRixlQUFzQixHQUFHO0lBQ3hCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFGZSxhQUFLLFFBRXBCLENBQUE7QUFBQSxDQUFDO0FBRUYsbUJBQTBCLElBQUksRUFBRSxJQUFJO0lBQ25DLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUFBLENBQUM7SUFDRixNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ1osQ0FBQztBQU5lLGlCQUFTLFlBTXhCLENBQUE7QUFBQSxDQUFDO0FBRUYsZ0JBQXVCLElBQUksRUFBRSxHQUFHO0lBQy9CLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDYixDQUFDO0FBTGUsY0FBTSxTQUtyQixDQUFBO0FBQUEsQ0FBQztBQUVGLHlCQUFnQyxJQUFJO0lBQ2hDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsT0FBTyxJQUFJLEVBQUMsQ0FBQztRQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUEsQ0FBQztRQUNGLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFUZSx1QkFBZSxrQkFTOUIsQ0FBQTtBQUFBLENBQUM7QUFFRixtQkFBMEIsVUFBVTtJQUNuQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUM7UUFDM0IsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwRCxJQUFJLE1BQU0sR0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDZixDQUFDO0lBQUEsQ0FBQztJQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFQZSxpQkFBUyxZQU94QixDQUFBO0FBQUEsQ0FBQztBQUVGLG1CQUEwQixHQUFXO0lBQ3BDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFBLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7Y0FDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2NBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUFBLENBQUM7SUFDRixNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ1osQ0FBQztBQVJlLGlCQUFTLFlBUXhCLENBQUE7QUFBQSxDQUFDO0FBRUYsb0JBQTJCLElBQVk7SUFDdEMsTUFBTSxDQUFDLElBQUk7U0FDVCxPQUFPLENBQUMsSUFBSSxFQUFDLFFBQVEsQ0FBQztTQUN0QixPQUFPLENBQUMsSUFBSSxFQUFDLE9BQU8sQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQztTQUNwQixPQUFPLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFOZSxrQkFBVSxhQU16QixDQUFBO0FBQUEsQ0FBQyJ9