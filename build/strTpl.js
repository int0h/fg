"use strict";
;
;
var StrTpl = (function () {
    function StrTpl(tpl, valueParseFn) {
        if (typeof tpl === "object") {
            this.src = tpl.src;
            this.gaps = tpl.gaps;
            this.parts = tpl.parts;
            return;
        }
        ;
        this.src = tpl;
        this.parts = [];
        this.gaps = [];
        return this.parse(tpl, valueParseFn);
    }
    ;
    StrTpl.prototype.parse = function (tpl, valueParseFn) {
        var gapStrArr = tpl.match(gapRe);
        if (!gapStrArr) {
            this.isString = true;
            this.parts = [tpl];
            return;
        }
        ;
        this.gaps = gapStrArr.map(function (part) {
            var partValue = part.slice(2, -1);
            var partRes = valueParseFn(partValue);
            partRes.escaped = part[0] !== "!";
            return partRes;
        });
        this.parts = tpl.split(gapRe);
        return this;
    };
    ;
    StrTpl.prototype.render = function (valueRenderFn) {
        var gaps = this.gaps.map(valueRenderFn);
        var parts = mixArrays(this.parts, gaps);
        return parts.join('');
    };
    ;
    return StrTpl;
}());
exports.StrTpl = StrTpl;
;
function read(tpl, valueParseFn) {
    var res = new StrTpl(tpl, valueParseFn);
    if (res.isString) {
        res = tpl;
    }
    ;
    return res;
}
exports.read = read;
;
var gapRe = /[\$\#\!]{1}\{[^\}]*\}/gm;
function mixArrays() {
    var rest = []; /*arrays*/
    for (var _i = 0; _i < arguments.length; _i++) {
        rest[_i - 0] = arguments[_i];
    }
    var maxLength = 0;
    var totalLength = 0;
    for (var i = 0; i < arguments.length; i++) {
        maxLength = Math.max(arguments[i].length, maxLength);
        totalLength += arguments[i].length;
    }
    ;
    var resArr = [];
    var arrayCount = arguments.length;
    for (var id = 0; id < maxLength; id++) {
        for (var j = 0; j < arrayCount; j++) {
            if (arguments[j].length > id) {
                resArr.push(arguments[j][id]);
            }
            ;
        }
        ;
    }
    ;
    return resArr;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyVHBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0clRwbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFJWixDQUFDO0FBSUQsQ0FBQztBQUVGO0lBTUMsZ0JBQWEsR0FBRyxFQUFFLFlBQTJCO1FBQzVDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFBLENBQUM7WUFDNUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDdkIsTUFBTSxDQUFDO1FBQ1IsQ0FBQztRQUFBLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7O0lBRUQsc0JBQUssR0FBTCxVQUFNLEdBQUcsRUFBRSxZQUEwQjtRQUNwQyxJQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUM7UUFDUixDQUFDO1FBQUEsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFTLElBQUk7WUFDdEMsSUFBSSxT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